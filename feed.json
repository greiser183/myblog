{
    "version": "https://jsonfeed.org/version/1",
    "title": "Travis&#x27;s Blog",
    "description": "",
    "home_page_url": "https://mrtravis.me",
    "feed_url": "https://mrtravis.me/feed.json",
    "user_comment": "",
    "icon": "https://mrtravis.me/media/website/logo.svg",
    "author": {
        "name": "Travis"
    },
    "items": [
        {
            "id": "https://mrtravis.me/linux-kuai-su-kai-qi-google-bbrde-fang-fashi-xian-tcpgao-xiao-dan-bian-jia-su.html",
            "url": "https://mrtravis.me/linux-kuai-su-kai-qi-google-bbrde-fang-fashi-xian-tcpgao-xiao-dan-bian-jia-su.html",
            "title": "Linux 开启Google BBR，实现TCP高效单边加速",
            "summary": "BBR 是谷歌公司的某个员工研发出来的服务器单边加速算法，Linux内核从4.9版开始集成BBR算法。相比锐速BBR的加速效果更为温和，并且占用内存小对服务器压力也很小，当时理想情况下是可以跑满整个服务器物理带宽，比锐速更加稳定，能够有效的降低服务器的网络丢包率，减少网络拥堵。由于Debian&hellip;",
            "content_html": "<p>BBR 是谷歌公司的某个员工研发出来的服务器单边加速算法，Linux内核从4.9版开始集成BBR算法。相比锐速BBR的加速效果更为温和，并且占用内存小对服务器压力也很小，当时理想情况下是可以跑满整个服务器物理带宽，比锐速更加稳定，能够有效的降低服务器的网络丢包率，减少网络拥堵。由于Debian 9默认的内核版本就是4.9.x，我们不需要像别的系统需要更换内核，直接就能开启BBR算法。<br>提示：目前最新版Debian 10内核为4.19，也可以直接用该方法开启BBR。</p>\n<p>1、修改系统变量</p>\n<pre><code>echo \"net.core.default_qdisc=fq\" &gt;&gt; /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" &gt;&gt; /etc/sysctl.conf</code></pre>\n<p>2、保存生效</p>\n<pre><code>sysctl -p\n</code></pre>\n<p>3、查看内核是否已开启BBR</p>\n<pre><code>sysctl net.ipv4.tcp_available_congestion_control\n</code></pre>\n<p>显示以下即已开启：</p>\n<pre><code>net.ipv4.tcp_available_congestion_control = bbr cubic reno\n</code></pre>\n<p>4、查看BBR是否启动</p>\n<pre><code>lsmod | grep bbr\n</code></pre>\n<p>显示以下即启动成功：</p>\n<pre><code>tcp_bbr                20480  14</code></pre>",
            "image": "https://mrtravis.me/media/posts/5/IMG_7844Fu-Ben.jpg",
            "author": {
                "name": "Travis"
            },
            "tags": [
                   "Ubuntu",
                   "Linux",
                   "Debain"
            ],
            "date_published": "2025-02-02T19:46:13+08:00",
            "date_modified": "2025-02-03T02:44:31+08:00"
        },
        {
            "id": "https://mrtravis.me/linux-cha-kan-duan-kou-zhan-yong-qing-kuang.html",
            "url": "https://mrtravis.me/linux-cha-kan-duan-kou-zhan-yong-qing-kuang.html",
            "title": "Linux 查看端口占用情况命令",
            "summary": "Linux 查看端口占用情况可以使用&hellip;",
            "content_html": "<p>Linux 查看端口占用情况可以使用 lsof 和 netstat 命令。</p>\n<p><strong>lsof</strong><br>lsof(list open files)是一个列出当前系统打开文件的工具。<br>lsof 查看端口占用语法格式：lsof -i:端口号<br>查看服务器 8000 端口的占用情况：</p>\n<pre><code>lsof -i:8000\n</code></pre>\n<p>lsof -i 需要 root 用户的权限来执行。<br>更多 lsof 的命令如下：<br><code>lsof -i:8080</code>：查看8080端口占用<br><code>lsof abc.txt</code>：显示开启文件abc.txt的进程<br><code>lsof -c abc</code>：显示abc进程现在打开的文件<br><code>lsof -c -p 1234</code>：列出进程号为1234的进程所打开的文件<br><code>lsof -g gid</code>：显示归属gid的进程情况<br><code>lsof +d /usr/local/</code>：显示目录下被进程开启的文件<br><code>lsof +D /usr/local/</code>：同上，但是会搜索目录下的目录，时间较长<br><code>lsof -d 4</code>：显示使用fd为4的进程<br><code>lsof -i -U</code>：显示所有打开的端口和UNIX domain文件</p>\n<p><strong>netstat</strong><br>netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。<br>netstat 查看端口占用语法格式：netstat -tunlp | grep 端口号<br>-t (tcp) 仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化为数字<br>-l 仅列出在Listen(监听)的服务状态<br>-p 显示建立相关链接的程序名<br>例如查看 8000 端口的情况，使用以下命令：</p>\n<pre><code>netstat -tunlp | grep 8000\n</code></pre>\n<p>更多命令：<br><code>netstat -ntlp</code> //查看当前所有tcp端口<br><code>netstat -ntulp | grep 80</code> //查看所有80端口使用情况<br><code>netstat -ntulp | grep 3306</code> //查看所有3306端口使用情况</p>\n<p><strong>kill</strong><br>在查到端口占用的进程后，如果你要杀掉对应的进程可以使用 kill 命令：</p>\n<pre><code>kill -9 PID\n</code></pre>\n<p>如上实例，我们看到 8000 端口对应的 PID 为 26993，使用以下命令杀死进程：</p>\n<pre><code>kill -9 26993</code></pre>",
            "image": "https://mrtravis.me/media/posts/4/IMG_5128.jpg",
            "author": {
                "name": "Travis"
            },
            "tags": [
            ],
            "date_published": "2025-02-02T19:37:48+08:00",
            "date_modified": "2025-02-03T02:09:23+08:00"
        },
        {
            "id": "https://mrtravis.me/linux-xia-ru-he-tian-jia-xu-ni-nei-cun.html",
            "url": "https://mrtravis.me/linux-xia-ru-he-tian-jia-xu-ni-nei-cun.html",
            "title": "Linux 下如何添加虚拟内存方法",
            "summary": "Linux操作系统有两种实现虚拟内存的方法：交换分区swap分区和交换文件swap文件。 采用交换分区的办法其实就是新建一个分区，然后将该分区挂载作为交换空间，方法步骤与传统的新建分区一样。只不过格式化分区和挂载分区分别采用mkswap和swapon命令。在创建分区之前，我们常常要用过fdisk&hellip;",
            "content_html": "<p>Linux操作系统有两种实现虚拟内存的方法：<strong>交换分区swap分区</strong>和<strong>交换文件swap文件</strong>。<br>采用交换分区的办法其实就是新建一个分区，然后将该分区挂载作为交换空间，方法步骤与传统的新建分区一样。只不过格式化分区和挂载分区分别采用<strong>mkswap</strong>和<strong>swapon</strong>命令。在创建分区之前，我们常常要用过<strong>fdisk -l</strong>和<strong>df -Th</strong>命令来查看硬盘信息和挂载信息，来确定分区的大小。</p>\n<p>查看内存可以用命令：</p>\n<pre><code>free -h\n</code></pre>\n<p>使用dd命令，来创建大小为2G的文件swapfile：</p>\n<pre><code>dd if=/dev/zero of=/mnt/swapfile bs=1M count=2048\n</code></pre>\n<p>其中，if表示input_file输入文件，of表示output_file输出文件，bs表示block_size块大小，count表示计数。这里，我采用了数据块大小为1M，数据块数目为2048，这样分配的空间就是2G大小。<br>然后，格式化交换文件：</p>\n<pre><code>mkswap /mnt/swapfile\n</code></pre>\n<p>之后，挂载交换文件：</p>\n<pre><code>swapon /mnt/swapfile\n</code></pre>\n<p>这样，可以看到添加了2G虚拟内存之后的内存大小，如图所示，总共为3G。<br>为了保证开机自动加载虚拟内存，还需要在<code>/etc/fstab</code>文件中加入如下命令：</p>\n<pre><code>/mnt/swapfile swap swap defaults 0 0\n</code></pre>\n<p>这样，就可以顺利执行一些比较消耗内存的操作了。</p>",
            "image": "https://mrtravis.me/media/posts/3/IMG_8488Fu-Ben.jpg",
            "author": {
                "name": "Travis"
            },
            "tags": [
            ],
            "date_published": "2025-02-02T19:37:25+08:00",
            "date_modified": "2025-02-03T02:09:31+08:00"
        },
        {
            "id": "https://mrtravis.me/ubuntuxi-tong-zhong-fang-huo-qiang-de-shi-yong-he-kai-fang-duan-kou.html",
            "url": "https://mrtravis.me/ubuntuxi-tong-zhong-fang-huo-qiang-de-shi-yong-he-kai-fang-duan-kou.html",
            "title": "Ubuntu 系统中防火墙的使用和开放端口",
            "summary": "不管是在Linux服务器还是在Ubuntu服务器中，当防火墙开启以后，会开放一些常用的端口，这时常常直接到自己Windows上telnet已经开放的端口，通常会忽略开放的这些端口在服务器中是否有程序进行监听，如果没有程序进行监听，telnet开放的这些端口时往往是不通的。 1、Ubuntu查看防火墙的状态&hellip;",
            "content_html": "<div class=\"post-content\">\n<p>不管是在Linux服务器还是在Ubuntu服务器中，当防火墙开启以后，会开放一些常用的端口，这时常常直接到自己Windows上telnet已经开放的端口，通常会忽略开放的这些端口在服务器中是否有程序进行监听，如果没有程序进行监听，telnet开放的这些端口时往往是不通的。</p>\n<p>1、Ubuntu查看防火墙的状态<br>在Ubuntu系统进行安装的时候默认安装了ufw防火墙<br>查看防火墙的状态</p>\n<p>命令：</p>\n<pre><code>sudo ufw status\n</code></pre>\n<p>系统提示： “Status: inactive”状态：不活跃</p>\n<p>上面提示表示没有开启防火墙，并不是没有安装防火墙<br>如果没有安装可以使用命令安装<br>命令：</p>\n<pre><code>sudo sudo apt-get install ufw\n</code></pre>\n<p>2、Ubuntu开启防火墙<br>开启防火墙，<br>命令：<br><code>sudo ufw enable</code> //开启防火墙<br>注意：Command may disrupt existing ssh connections. Proceed with operation (y|n)?<br>表示：命令可能会中断现有的ssh连接。继续操作(y|n)?</p>\n<p>因为是在远程的Xshell进行连接开启防火墙的，有的系统是没有将SSH的22端口设置为public的，所以会有这样的提示，这里分为两种情况，如果开启防火墙时在防火墙之中检测到22端口已添加为防火墙的开放端口，那么输入y继续操作以后，当前Xshell会自动断开连接；相反，如果开启防火墙时在防火墙之中没有检测到22端口，那么输入y继续操作以后22端口将会不再支持其他连接，只支持当前已有的这个连接，保持当前连接的原因是可以通过该连接开放22端口。</p>\n<p>这里之前没有设置过，直接输入y继续执行<br>系统提示：“防火墙是活动的，并在系统启动时启用”<br>表示防火墙已经开启</p>\n<p>查看防火墙的状态<br>命令：<br><code>sudo ufw status</code> //查看防火墙的状态<br>可以看到系统只对外开放了80端口</p>\n<p>在这里通常会有些错觉，22端口没有开放，但是依然是连接状态，这是系统做的人性化优化，便于远程管理服务器，虽然22端口没有开放，但是用户通过当前的连接开启防火墙后，该连接依然处于连接状态，只要不关闭当前连接还是可以在当前连接中正产操作的。如果是重新开启一个连接是连不上的</p>\n<p>在windows上进行telnet也是不通的<br>所以在远程管理服务器时，如果开启了防火墙先查看SSH的22端口有没有开放，如果没有开放，第一时间开放22端口（如果为了安全也可以指定ip开放22端口）</p>\n<p>3、Ubuntu添加开放SSH端口<br>命令：<br><code>sudo ufw allow 22</code> //开放22端口</p>\n<p>开启完成，需要重启防火墙生效<br>命令：<br><code>sudo ufw reload</code> //重启ufw防火墙<br>重启成功</p>\n<p>再查看防火墙的状态<br>命令：<br><code>sudo ufw status</code> //查看防火墙的状态<br>22端口已经开放</p>\n<p>查看22端口的监听状态<br>命令：<br><code>sudo netstat -tunlp | grep 22</code> //查看22端口信息</p>\n<p>关闭普通端口<br>命令：<br><code>sudo ufw delete allow 21</code> //关闭21端口<br>关闭成功</p>\n<p>成功以后需要重启生效<br>命令：<br><code>sudo ufw reload</code> //重启防火墙，是配置生效</p>\n</div>\n<div class=\"post-footer\">\n<div class=\"meta\">\n<div class=\"info\"> </div>\n</div>\n</div>",
            "image": "https://mrtravis.me/media/posts/2/IMG_7214Fu-Ben.jpg",
            "author": {
                "name": "Travis"
            },
            "tags": [
            ],
            "date_published": "2025-02-02T19:27:57+08:00",
            "date_modified": "2025-02-03T02:08:57+08:00"
        },
        {
            "id": "https://mrtravis.me/linux-ubuntudebainxia-kai-qi-sshbing-qie-yun-xu-rootyong-hu-yuan-cheng-deng-lu.html",
            "url": "https://mrtravis.me/linux-ubuntudebainxia-kai-qi-sshbing-qie-yun-xu-rootyong-hu-yuan-cheng-deng-lu.html",
            "title": "Linux 开启SSH，允许root用户远程登录",
            "summary": "你可能想知道如何以root用户登录Ubuntu/Debain，或者默认的root密码是什么。在Linux中，出于安全原因，默认情况下禁用了root用户。本教程说明了如何在Linux (Ubuntu/Debain)中启用和禁用root用户。&hellip;",
            "content_html": "<div class=\"post-content\">\n<p>你可能想知道如何以root用户登录Ubuntu/Debain，或者默认的root密码是什么。在Linux中，出于安全原因，默认情况下禁用了root用户。本教程说明了如何在Linux (Ubuntu/Debain)中启用和禁用root用户。</p>\n<p>一、设置root密码<br>1.先选择从浏览器打开ssh连接服务器<br>2.切换到root账号</p>\n<pre><code>sudo -i\n</code></pre>\n<p>3.设置root密码</p>\n<pre><code>passwd\n</code></pre>\n<p>然后会要求输入新密码，然后再重复一次密码，输入密码的时候不会显示出来，所以直接输入密码，然后回车，再然后重复输入密码回车</p>\n<hr>\n<p>二、开启SSH权限<br>①方法一<br>1.修改SSH配置文件/etc/ssh/sshd_config</p>\n<pre><code>vi /etc/ssh/sshd_config\n</code></pre>\n<p>2.然后再输”i”进入编辑模式</p>\n<pre><code>i\n</code></pre>\n<p>3.找到以下内容并修改<br><code>PermitRootLogin yes</code> //默认为no，需要开启root用户访问改为yes<br><code>PasswordAuthentication yes</code> //默认为no，改为yes开启密码登陆<br>4.修改完成后，再下按 <code>esc</code> 键，然后再输入</p>\n<pre><code>:wq\n</code></pre>\n<p>5.重启SSH服务</p>\n<pre><code>service sshd restart\n</code></pre>\n<p>②方法二<br>CentOS和Debian通用，输入以下两条命令</p>\n<pre><code>sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config\n\nsed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n</code></pre>\n<p>Ubuntu系统，输入以下两条命令</p>\n<pre><code>sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config\n\nsed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n</code></pre>\n<p>重启服务器</p>\n<pre><code>reboot</code></pre>\n</div>\n<div class=\"post-footer\">\n<div class=\"meta\">\n<div class=\"info\"> </div>\n</div>\n</div>",
            "image": "https://mrtravis.me/media/posts/1/IMG_7627Fu-Ben.jpg",
            "author": {
                "name": "Travis"
            },
            "tags": [
            ],
            "date_published": "2025-02-02T19:27:37+08:00",
            "date_modified": "2025-02-03T02:52:19+08:00"
        }
    ]
}
